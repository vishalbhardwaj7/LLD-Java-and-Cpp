//Chain of responsibility design pattern
//asked in lot of interviews

//Design ATM, some kind of vending machine, Design loggers(amazon)

//this is used whenever a sender sends me a request and does not know who will fulfil my request

// sender    ->>>>>>>>>>>> Request  ->>>>>>>>>>>>> Receiver obj1, Receiver obj2, Response(chain of responsibilities)

//lets take a simple example of ATM vending machine
                                                           ATM system
Client(submit a withdraw 2000 rupee request) -> (2000 rs handler -> 1000 rs handler -> 500 rs handler -> 100 rs handler )
                                                    Concrete Handler1    ......so on

//lets say 2000 rs handler says i can't handle this as i dont have a 2000 rs note
//so request is forwarded to 1000 rs handler
//1000 rs handler has only note so it sends rest 1000 rs request to 500 rs handler
//and so on
//if request are not fulfil then we can send insufficient amount error
//so it makes a chain of responsibilities


Client {has->a handler

}


<<abstract>>
class Handler{
    handleRequest();
}

class ConcreteHandler1{is-a handler
//implementation of handleRequest method
}

class ConcreteHandler2{is-a handler

}

class ConcreteHandler3{is-a handler

}

//implementation

Logger obj = new Logger();

obj.log(Info,"msg")
obj.log(Debug,"msg")
obj.log(Error,"msg")

// whenever we are using the diff types of loggers lets see how it is internally working
//we never specify or make a infor or debug object but how does it work lets see


public abstract class LogProcessor{
    public static int INFO = 1;
    public static int DEBUG = 2;
    public static int ERROR = 3;

    LogProcessor nextLogProcessor;

    LogProcessor(LogProcessor loggerProcessor){
        this.nextLogProcessor = loggerProcessor;
    }

    public void log(int logLevel, String message){
        if(nextLogProcessor != null){
            nextLogProcessor.log(logLevel, message);
        }
    }
}

class InfoLogProcessor extends LogProcessor{
    InfoLogProcessor(LogProcessor nextLogProcessor){super(nextLogProcessor);}//basically i tell in advance to my super what will be the next log processor
    public void log(int logLevel, String message){
        if(logLevel == INFO)
            System.out.println("INFO: " + message );
        else {
            super.log(logLevel,message);//if it is not info i will ask the parent to log it so parent will try to call log of nextLogProcessor
        }
    }
}
class DebugLogProcessor extends LogProcessor{//similarly this will also work
    DebugLogProcessor(LogProcessor nextLogProcessor){super(nextLogProcessor);}//basically i tell in advance to my super what will be the next log processor
    public void log(int logLevel, String message){
        if(logLevel == DEBUG)
            System.out.println("Debug: " + message );
        else {
            super.log(logLevel,message);//if it is not info i will ask the parent to log it so parent will try to call log of nextLogProcessor
        }
    }
}
class ErrorLogProcessor extends LogProcessor{//similarly this will also work
    ErrorLogProcessor(LogProcessor nextLogProcessor){super(nextLogProcessor);}//basically i tell in advance to my super what will be the next log processor
    public void log(int logLevel, String message){
        if(logLevel == ERROR)
            System.out.println("Error: " + message );
        else {
            super.log(logLevel,message);//if it is not info i will ask the parent to log it so parent will try to call log of nextLogProcessor
        }
    }
}

main(){//nothing but a client for us
    LogProcessor logObject = new InfoLogProcessor(new DebugLogProcessor(new ErrorLogProcessor(nextLogProcessor:null)));
    //so i am setting nextLogProcessor of InfoLogProcessor as DebugLogProcessor
    //and setting ErrorLogProcessor as nextLogProcessor of DebugLogProcessor

    logObject.log(logProcessor.ERROR, "exception  ");
    logObject.log(logProcessor.DEBUG, "need to debug happens");
    logObject.log(logProcessor.INFO, "just for info");
}